package alexp.macrobase.pipeline;

import alexp.macrobase.utils.DataFrameUtils;
import edu.stanford.futuredata.macrobase.analysis.classify.Classifier;
import edu.stanford.futuredata.macrobase.datamodel.DataFrame;
import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.Arrays;

public abstract class Pipeline {
    protected long lastGeneratedTime = -1;

    private String outputDir;

    public String getOutputDir() {
        return outputDir;
    }

    public void setOutputDir(String outputDir) {
        this.outputDir = outputDir;
    }

    protected void createAutoGeneratedColumns(DataFrame dataFrame, String... columns) {
        Arrays.stream(columns).filter(Pipelines::isAutoGeneratedColumn).forEach(column -> {
            switch (column) {
                case "__autogenerated_time": {
                    Pipelines.generatedTimeColumn(dataFrame, column, lastGeneratedTime + 1);
                    double[] values = dataFrame.getDoubleColumnByName(column);
                    lastGeneratedTime = (long) values[values.length - 1];
                }
                break;
                default:
                    throw new RuntimeException("Unknown column " + column);
            }
        });
    }

    protected void saveOutliers(String baseFileName, Classifier classifier) throws IOException {
        if (StringUtils.isEmpty(outputDir)) {
            return;
        }

        DataFrame data = classifier.getResults().filter(classifier.getOutputColumnName(), (double v) -> v > 0.0);

        DataFrameUtils.saveToCsv(Paths.get(outputDir, baseFileName + ".csv").toString(), data);
    }
}
