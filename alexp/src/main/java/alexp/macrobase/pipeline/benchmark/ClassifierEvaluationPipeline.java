package alexp.macrobase.pipeline.benchmark;

import alexp.macrobase.pipeline.Pipeline;
import alexp.macrobase.pipeline.Pipelines;
import alexp.macrobase.pipeline.benchmark.config.BenchmarkConfig;
import alexp.macrobase.pipeline.benchmark.result.ExecutionResult;
import alexp.macrobase.pipeline.benchmark.result.ResultFileWriter;
import alexp.macrobase.pipeline.benchmark.result.ResultWriter;
import com.google.common.base.Stopwatch;
import edu.stanford.futuredata.macrobase.analysis.classify.Classifier;
import edu.stanford.futuredata.macrobase.datamodel.DataFrame;
import edu.stanford.futuredata.macrobase.datamodel.Schema;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.stream.Collectors;

public class ClassifierEvaluationPipeline extends Pipeline {
    private final BenchmarkConfig conf;
    private ResultWriter resultWriter;

    private final String timeColumn = "__autogenerated_time";

    public ClassifierEvaluationPipeline(BenchmarkConfig conf) {
        this(conf, null);
    }

    public ClassifierEvaluationPipeline(BenchmarkConfig conf, ResultWriter resultWriter) {
        this.conf = conf;
        this.resultWriter = resultWriter;
    }

    public void run() throws Exception {
        printInfo(String.format("Running %s %s on %s", conf.getAlgorithmConfig().getAlgorithmId(), conf.getAlgorithmConfig().getParameters(), conf.getDatasetConfig().getUri().getOriginalString()));

        if (resultWriter == null) {
            setupResultWriter();
        }

        DataFrame dataFrame = loadDara();

        Classifier classifier = Pipelines.getClassifier(conf.getAlgorithmConfig().getAlgorithmId(), conf.getAlgorithmConfig().getParameters(), conf.getDatasetConfig().getMetricColumns());

        Stopwatch sw = Stopwatch.createStarted();

        classifier.process(dataFrame);

        final long classifierMs = sw.elapsed(TimeUnit.MILLISECONDS);
        printInfo(String.format("Time elapsed: %d ms (%.2f sec)", classifierMs, classifierMs / 1000.0));

        DataFrame resultsDf = classifier.getResults();

        resultWriter.write(resultsDf, new ExecutionResult(classifierMs, conf));
    }

    private void setupResultWriter() {
        resultWriter = new ResultFileWriter().setOutputDir(getOutputDir());
    }

    private DataFrame loadDara() throws Exception {
        Map<String, Schema.ColType> colTypes = getColTypes();

        List<String> requiredColumns = new ArrayList<>(colTypes.keySet());

        DataFrame dataFrame = Pipelines.loadDataFrame(conf.getDatasetConfig().getUri(), colTypes, requiredColumns, conf.getDatasetConfig().toMap());

        createAutoGeneratedColumns(dataFrame, timeColumn); // needed for MCOD

        return dataFrame;
    }

    private Map<String, Schema.ColType> getColTypes() {
        return Arrays.stream(conf.getDatasetConfig().getMetricColumns())
                .collect(Collectors.toMap(Function.identity(), c -> Schema.ColType.DOUBLE));
    }
}
