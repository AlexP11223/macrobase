package alexp.macrobase.pipeline.benchmark;

import alexp.macrobase.evaluation.*;
import alexp.macrobase.evaluation.roc.Curve;
import alexp.macrobase.ingest.Uri;
import alexp.macrobase.outlier.MAD;
import alexp.macrobase.outlier.MinCovDet;
import alexp.macrobase.outlier.mcod.McodClassifier;
import alexp.macrobase.pipeline.Pipelines;
import com.google.common.base.Stopwatch;
import edu.stanford.futuredata.macrobase.analysis.classify.Classifier;
import edu.stanford.futuredata.macrobase.analysis.classify.PercentileClassifier;
import edu.stanford.futuredata.macrobase.datamodel.DataFrame;
import edu.stanford.futuredata.macrobase.datamodel.Schema;
import edu.stanford.futuredata.macrobase.pipeline.PipelineConfig;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ClassifierEvaluationPipeline {
    private final PipelineConfig conf;

    private final Uri inputURI;

    private String[] metricColumns;
    private String timeColumn;
    private String labelColumn;

    private ArrayList<Map<String, Object>> classifierConfigs;

    private DataFrame dataFrame;
    private int[] labels;

    private final String searchMeasure;

    public ClassifierEvaluationPipeline(PipelineConfig conf) throws Exception {
        this.conf = conf;

        inputURI = new Uri(conf.get("inputURI"));

        timeColumn = conf.get("timeColumn");
        //noinspection unchecked
        metricColumns = ((List<String>) conf.get("metricColumns")).toArray(new String[0]);
        labelColumn = conf.get("labelColumn", "is_anomaly");

        classifierConfigs = conf.get("classifiers");

        searchMeasure = conf.get("searchMeasure", "");

        dataFrame = loadDara();
        labels = Arrays.stream(dataFrame.getDoubleColumnByName(labelColumn)).mapToInt(d -> (int) d).toArray();

        if (isAutoGeneratedTime()) {
            double[] time = IntStream.rangeClosed(0, dataFrame.getNumRows()).mapToDouble(n -> (double) n).toArray();
            dataFrame.addColumn(timeColumn, time);
        }
    }

    public void run() throws Exception {
        List<Classifier> classifiers = classifierConfigs.stream().map(this::getClassifier).collect(Collectors.toList());

        System.out.println(inputURI.getOriginalString());

        for (Classifier classifier : classifiers) {
            run(classifier);
        }
    }

    public void runGridSearch() throws Exception {
        System.out.println(inputURI.getOriginalString());

        for (Map<String, Object> classifierConf : classifierConfigs) {
            runGridSearch(new PipelineConfig(classifierConf));
        }
    }

    private void run(Classifier classifier) throws Exception {
        System.out.println();
        System.out.println(classifier.getClass().getSimpleName());

        Stopwatch sw = Stopwatch.createStarted();

        classifier.process(dataFrame);

        final long classifierMs = sw.elapsed(TimeUnit.MILLISECONDS);
        System.out.println(String.format("Time elapsed: %d ms (%.2f sec)", classifierMs, classifierMs / 1000.0));

        double[] classifierResult = classifier.getResults().getDoubleColumnByName(classifier.getOutputColumnName());
        Curve aucAnalysis = aucCurve(classifierResult);

        double rocArea = aucAnalysis.rocArea();
        double prArea = aucAnalysis.prArea();

        System.out.println(String.format("ROC Area: %.4f", rocArea));
        System.out.println(String.format("PR Area: %.4f", prArea));

        System.out.println("Stats for middle threshold:");

        int middleRank = aucAnalysis.rocPoints().length / 2;
        ConfusionMatrix confusionMatrix = aucAnalysis.confusionMatrix(middleRank);

        System.out.println(confusionMatrix);

        System.out.println(String.format("Accuracy: %.4f", new Accuracy().evaluate(confusionMatrix)));
        System.out.println(String.format("F1-score: %.4f", new FScore().evaluate(confusionMatrix)));

        new AucChart()
                .setName(classifier.getClass().getSimpleName() + ", " + inputURI.shortDisplayPath())
                .saveToPng(aucAnalysis, "alexp/bench_output/" + classifier.getClass().getSimpleName() + ".png");
    }

    private void runGridSearch(PipelineConfig classifierConf) throws Exception {
        System.out.println();
        System.out.println(getClassifier(classifierConf.getValues()).getClass().getSimpleName());

        Map<String, Object[]> searchParams = classifierConf.<ArrayList<Map<String, Object>>>get("searchParams").stream()
                .collect(Collectors.toMap(o -> o.keySet().iterator().next(), o -> ((ArrayList) o.values().iterator().next()).toArray()));

        GridSearch gs = new GridSearch();
        searchParams.forEach(gs::addParam);

        gs.run(params -> {
            Map<String, Object> currConf = new HashMap<>(classifierConf.getValues());
            currConf.putAll(params);

            Classifier classifier = getClassifier(currConf);

            classifier.process(dataFrame);

            double[] classifierResult = classifier.getResults().getDoubleColumnByName(classifier.getOutputColumnName());

            switch (searchMeasure) {
                case "roc": return aucCurve(classifierResult).rocArea();
                case "pr": return aucCurve(classifierResult).prArea();
                case "f1": {
                    Curve curve = aucCurve(classifierResult);
                    FScore fScore = new FScore();
                    return IntStream.range(0, curve.rocPoints().length)
                            .mapToDouble(i -> fScore.evaluate(curve.confusionMatrix(i)))
                            .filter(d -> !Double.isNaN(d))
                            .max().getAsDouble();
                }
                default: throw new RuntimeException("Unknown search measure " + searchMeasure);
            }
        });

        System.out.println(searchMeasure.toUpperCase());
        gs.getResults().forEach((score, params) -> System.out.println(String.format("%.4f: %s", score, params)));
    }

    private Curve aucCurve(double[] classifierResult) {
        return new Curve.PrimitivesBuilder()
                .scores(classifierResult)
                .labels(labels)
                .build();
    }

    private DataFrame loadDara() throws Exception {
        Map<String, Schema.ColType> colTypes = new HashMap<>();
        if (timeColumn != null && !isAutoGeneratedTime()) {
            colTypes.put(timeColumn, Schema.ColType.DOUBLE);
        }
        colTypes.put(labelColumn, Schema.ColType.DOUBLE);
        for (String metricColumn : metricColumns) {
            colTypes.put(metricColumn, Schema.ColType.DOUBLE);
        }

        List<String> requiredColumns = new ArrayList<>(colTypes.keySet());

        return Pipelines.loadDataFrame(inputURI, colTypes, requiredColumns, conf);
    }

    private Classifier getClassifier(Map<String, Object> conf) throws RuntimeException {
        String classifierType = (String) conf.get("classifier");

        switch (classifierType.toLowerCase()) {
            case "mcod": {
                McodClassifier classifier = new McodClassifier(metricColumns);
                classifier.setMaxDistance((double) conf.getOrDefault("maxDistance", 1.0));
                classifier.setMinNeighborCount((int) conf.getOrDefault("minNeighborCount", 30));
                classifier.setWindowSize((int) conf.getOrDefault("classifierWindowSize", 9999));
                classifier.setSlide((int) conf.getOrDefault("classifierSlide", 9999));
                classifier.setTimeColumnName(timeColumn);
                return classifier;
            }
            case "percentile": {
                PercentileClassifier classifier = new PercentileClassifier(metricColumns[0]);
                classifier.setPercentile((double) conf.getOrDefault("cutoff", 1.0));
                classifier.setIncludeHigh((boolean) conf.getOrDefault("includeHi",true));
                classifier.setIncludeLow((boolean) conf.getOrDefault("includeLo",true));
                return classifier;
            }
            case "mad": {
                MAD classifier = new MAD(metricColumns[0]);
                classifier.setTrainSize((int) conf.getOrDefault("trainSize", 10000));
                return classifier;
            }
            case "mcd": {
                MinCovDet classifier = new MinCovDet(metricColumns);
                classifier.setTrainSize((int) conf.getOrDefault("trainSize", 10000));
                classifier.setAlpha((double) conf.getOrDefault("alpha", 0.5));
                classifier.setStoppingDelta((double) conf.getOrDefault("stoppingDelta", 0.001));
                return classifier;
            }
            default : {
                throw new RuntimeException("Bad Classifier Type");
            }
        }
    }

    private boolean isAutoGeneratedTime() {
        return "__autogenerated_time".equalsIgnoreCase(timeColumn);
    }
}
